# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yL9wqwHWwB_m1snS9kro3axCePfkedtk
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Step 1:  dataset
np.random.seed(42)

#  features
n_samples = 1000
ad_spend_tv = np.random.uniform(1000, 50000, n_samples)  # Ad spend on TV
ad_spend_social_media = np.random.uniform(500, 30000, n_samples)  # Ad spend on social media
ad_spend_radio = np.random.uniform(300, 15000, n_samples)  # Ad spend on radio
audience_age = np.random.randint(18, 65, n_samples)  # Audience age
audience_income = np.random.uniform(20000, 150000, n_samples)  # Audience income
product_price = np.random.uniform(10, 500, n_samples)  # Product price
product_quality = np.random.uniform(1, 10, n_samples)  # Product quality rating (1-10)

# sales target (with some noise)
sales = (0.05 * ad_spend_tv + 0.07 * ad_spend_social_media +
         0.04 * ad_spend_radio + 0.03 * audience_income -
         0.01 * product_price + 0.1 * product_quality +
         np.random.normal(0, 1000, n_samples))

# Creating a DataFrame
data = pd.DataFrame({
    'ad_spend_tv': ad_spend_tv,
    'ad_spend_social_media': ad_spend_social_media,
    'ad_spend_radio': ad_spend_radio,
    'audience_age': audience_age,
    'audience_income': audience_income,
    'product_price': product_price,
    'product_quality': product_quality,
    'sales': sales
})

# Step 2: Preprocessing - No missing values in this dataset

# Step 3: Feature Selection (use all features)

# Step 4: Train-Test Split
X = data.drop('sales', axis=1)
y = data['sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Model Selection - Using RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Step 6: Training the model
model.fit(X_train, y_train)

# Step 7: Prediction
y_pred = model.predict(X_test)

# Step 8: Model Evaluation
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

mae, mse, r2